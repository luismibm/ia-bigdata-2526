{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Exercicis previs"
      ],
      "metadata": {
        "collapsed": false,
        "id": "8fdd25ee749cee7e"
      },
      "id": "8fdd25ee749cee7e"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Grafs"
      ],
      "metadata": {
        "collapsed": false,
        "id": "c9dac13c02d977ab"
      },
      "id": "c9dac13c02d977ab"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Implementació de grafs"
      ],
      "metadata": {
        "collapsed": false,
        "id": "b077af1ce0a200bb"
      },
      "id": "b077af1ce0a200bb"
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Crea un graf amb 5 vèrtexs i 5 arestes, utilitzant el mètode de matriu d'adjacència.\n"
      ],
      "metadata": {
        "collapsed": false,
        "id": "ed3bde1f99e337c5"
      },
      "id": "ed3bde1f99e337c5"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [
        "connection_matrix = [\n",
        "    [0, 1, 0, 0, 1],\n",
        "    [1, 0, 1, 0, 0],\n",
        "    [0, 1, 0, 1, 0],\n",
        "    [0, 0, 1, 0, 1],\n",
        "    [1, 0, 0, 1, 0]\n",
        "]"
      ],
      "metadata": {
        "id": "9f3c1227cec46fc6"
      },
      "id": "9f3c1227cec46fc6"
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Implementa el mateix graf utilitzant el mètode de llista d'adjacència."
      ],
      "metadata": {
        "collapsed": false,
        "id": "ad03c522a1dad4a2"
      },
      "id": "ad03c522a1dad4a2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [
        "connection_list = {\n",
        "  # node : [connection, connection, ...]\n",
        "  1: [2, 5],\n",
        "  2: [1, 3],\n",
        "  3: [2, 4],\n",
        "  4: [3, 5],\n",
        "  5: [4, 1]\n",
        "}"
      ],
      "metadata": {
        "id": "2203839371ec2efc"
      },
      "id": "2203839371ec2efc"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Funcions sobre grafs"
      ],
      "metadata": {
        "collapsed": false,
        "id": "49e108de231defb2"
      },
      "id": "49e108de231defb2"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Les funcions següents s'han de poder utilitzar amb els dos tipus d'implementació."
      ],
      "metadata": {
        "collapsed": false,
        "id": "757f379f82fe6e7e"
      },
      "id": "757f379f82fe6e7e"
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Escriu una funció `imprimir_graf` que imprimeixi un graf."
      ],
      "metadata": {
        "collapsed": false,
        "id": "89e1934bf50ef031"
      },
      "id": "89e1934bf50ef031"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "1b8c8069dcd1701b"
      },
      "id": "1b8c8069dcd1701b"
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Escriu una funció `grau` que donat un graf i un vèrtex retorni el grau d'aquest vèrtex."
      ],
      "metadata": {
        "collapsed": false,
        "id": "7072c78cdb1682c1"
      },
      "id": "7072c78cdb1682c1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "62ac865af88cbbbe"
      },
      "id": "62ac865af88cbbbe"
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Escriu una funció `veins` que donat un graf i un vèrtex retorni una llista amb els vèrtexs adjacents a aquest vèrtex."
      ],
      "metadata": {
        "collapsed": false,
        "id": "b16a0b4e31e0a806"
      },
      "id": "b16a0b4e31e0a806"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "ed277f6512bbb492"
      },
      "id": "ed277f6512bbb492"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Arbres"
      ],
      "metadata": {
        "collapsed": false,
        "id": "94d4f0cb47c06ff5"
      },
      "id": "94d4f0cb47c06ff5"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Implementació d'arbres"
      ],
      "metadata": {
        "collapsed": false,
        "id": "80295b25342fdc44"
      },
      "id": "80295b25342fdc44"
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Partint del següent arbre convertiu-lo en un arbre binari de búsqueda."
      ],
      "metadata": {
        "collapsed": false,
        "id": "6c20220255917ad6"
      },
      "id": "6c20220255917ad6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [
        "class Node:\n",
        "    def __init__(self, valor, fills=None):\n",
        "        self.valor = valor\n",
        "        self.fills = fills\n",
        "\n",
        "arbre = Node(1, [\n",
        "    Node(2, [\n",
        "        Node(3),\n",
        "        Node(4, [\n",
        "            Node(5),\n",
        "            Node(6)\n",
        "        ])\n",
        "    ]),\n",
        "    Node(7, [\n",
        "        Node(8),\n",
        "        Node(9)\n",
        "    ]),\n",
        "    Node(10)\n",
        "])"
      ],
      "metadata": {
        "id": "b2a31a233e505001"
      },
      "id": "b2a31a233e505001"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "13b1e55491142b29"
      },
      "id": "13b1e55491142b29"
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Implementa una funció `imprimir_arbre` que imprimeixi un arbre binari."
      ],
      "metadata": {
        "collapsed": false,
        "id": "c8496e108a219d56"
      },
      "id": "c8496e108a219d56"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "3d10c04b629f7048"
      },
      "id": "3d10c04b629f7048"
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Implementa una funció `buscar` que donat un arbre binari de búsqueda i un valor retorni el node que conté aquest valor o `None` si no el troba."
      ],
      "metadata": {
        "collapsed": false,
        "id": "a6a2c7a51bf56cc1"
      },
      "id": "a6a2c7a51bf56cc1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "1253c20c367a2eea"
      },
      "id": "1253c20c367a2eea"
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. Implementa una funció `inserir` que donat un arbre binari de búsqueda i un valor l'afegeixi a l'arbre, mantenint la propietat de ser un arbre binari de búsqueda."
      ],
      "metadata": {
        "collapsed": false,
        "id": "ecaa8147922f47a2"
      },
      "id": "ecaa8147922f47a2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "8e4cdf805df68d7f"
      },
      "id": "8e4cdf805df68d7f"
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Implementa una funció `eliminar` que donat un arbre binari de búsqueda i un valor l'elimini de l'arbre, mantenint la propietat de ser un arbre binari de búsqueda."
      ],
      "metadata": {
        "collapsed": false,
        "id": "547a2e05ff367d7f"
      },
      "id": "547a2e05ff367d7f"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "70249592e6c235cd"
      },
      "id": "70249592e6c235cd"
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. Implementa la funció `buscar` sense utilitzar recursivitat."
      ],
      "metadata": {
        "collapsed": false,
        "id": "43e01c5eda7194c9"
      },
      "id": "43e01c5eda7194c9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "1be768c9e9aa6fc4"
      },
      "id": "1be768c9e9aa6fc4"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Llistes i cues"
      ],
      "metadata": {
        "collapsed": false,
        "id": "eac9d297b4b1c99a"
      },
      "id": "eac9d297b4b1c99a"
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. Crea una llista enllaçada amb els nombres del 1 al 5."
      ],
      "metadata": {
        "collapsed": false,
        "id": "b44bad0998368182"
      },
      "id": "b44bad0998368182"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "b6adaa3b32f743a9"
      },
      "id": "b6adaa3b32f743a9"
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. Utilitza una cua per simular una cua d'una caixer automàtic. Simularem 30 accions aleatoriament entre entrar a la cua, sortir de la cua i consultar el saldo. Cada acció té una probabilitat del 33% de ser escollida. Al final de la simulació, mostra el nombre de persones que queden a la cua."
      ],
      "metadata": {
        "collapsed": false,
        "id": "d57d4bd187689a12"
      },
      "id": "d57d4bd187689a12"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "b0ea17de2b2819d6"
      },
      "id": "b0ea17de2b2819d6"
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Utilitza una pila per simular una pila de plats. Simularem 30 accions aleatoriament entre apilar un plat, desapilar un plat i trencar la meitat dels plats. Cada acció té una probabilitat del 33% de ser escollida. Al final de la simulació, mostra el nombre de plats que queden a la pila."
      ],
      "metadata": {
        "collapsed": false,
        "id": "5eabce105ee93cdf"
      },
      "id": "5eabce105ee93cdf"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "2d62a0c9c0c5b60b"
      },
      "id": "2d62a0c9c0c5b60b"
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. Utilitza una cua de prioritats per simular el planificador d'un sistema operatiu. Cadascuna de les tasques té una prioritat associada. Simularem 30 accions aleatoriament entre afegir una tasca (amb una prioritat aleatòria entre 1 i 10), eliminar una tasca i executar una tasca. Cada acció té una probabilitat del 33% de ser escollida. Al final de la simulació, mostra el nombre de tasques que queden a la cua."
      ],
      "metadata": {
        "collapsed": false,
        "id": "3bbc3d9b1bb7a3ad"
      },
      "id": "3bbc3d9b1bb7a3ad"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "b8e1d33029020d3a"
      },
      "id": "b8e1d33029020d3a"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cost computacional"
      ],
      "metadata": {
        "collapsed": false,
        "id": "1445a80e7f373088"
      },
      "id": "1445a80e7f373088"
    },
    {
      "cell_type": "markdown",
      "source": [
        "16. Calcula el cost computacional de la funció `buscar` de l'exercici 8."
      ],
      "metadata": {
        "collapsed": false,
        "id": "8441da763faf0a54"
      },
      "id": "8441da763faf0a54"
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "collapsed": false,
        "id": "377db016c942af"
      },
      "id": "377db016c942af"
    },
    {
      "cell_type": "markdown",
      "source": [
        "17. Pensa en un algorisme que tingui un cost computacional de $O(n^2)$."
      ],
      "metadata": {
        "collapsed": false,
        "id": "6206ed887676ffc2"
      },
      "id": "6206ed887676ffc2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-16T20:12:50.915294Z",
          "start_time": "2023-10-16T20:12:50.882369Z"
        },
        "id": "cb4731bcc9380f6c"
      },
      "id": "cb4731bcc9380f6c"
    },
    {
      "cell_type": "markdown",
      "source": [
        "18. Com podries fer per reduir el cost computacional del següent algorisme utilitzant memòria extra?"
      ],
      "metadata": {
        "collapsed": false,
        "id": "9f25770c45f89bb8"
      },
      "id": "9f25770c45f89bb8"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [
        "# Utilitzant un diccionari per emmagatzemar els resultats de les crides recursives\n",
        "def recur_fib(n):\n",
        "    if n == 0 or n == 1:\n",
        "        return n\n",
        "    return recur_fib(n - 1) + recur_fib(n - 2)\n",
        ""
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-16T20:32:08.780169Z",
          "start_time": "2023-10-16T20:32:08.759145Z"
        },
        "id": "619912c348d4cc39"
      },
      "id": "619912c348d4cc39"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [
        "import time\n",
        "\n",
        "n = 35\n",
        "\n",
        "start = time.time()\n",
        "print(recur_fib(n))\n",
        "print(time.time() - start)\n",
        "\n",
        "start = time.time()\n",
        "mem = {}\n",
        "print(recur_fib_optimitzat(n, mem))\n",
        "print(time.time() - start)"
      ],
      "metadata": {
        "id": "f14949cc085a2a17"
      },
      "id": "f14949cc085a2a17"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "e46cf08cd5cde728"
      },
      "id": "e46cf08cd5cde728"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 2
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython2",
      "version": "2.7.6"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}